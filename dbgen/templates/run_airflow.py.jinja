# External imports
from typing import Any
from airflow import DAG # type: ignore

from datetime import datetime

# Internal Imports
from dbgen import Gen
from dbgen.core.airflow_plugin import GenOperator # type: ignore

# Written by {{ user }}

objs = dict({% for obj,(pk,ids,idfks) in objs.items() %} {{ obj }} = ('{{ pk }}', {{ ids }},{{ idfks }}),{% endfor %}) # type: D[str,T[str,L[str],L[str]]]

# Define DAG
default_args ={
    'owner'             : '{{ user }}',
    'start_date'        : datetime.strptime('{{ date }}','%Y-%m-%d'),
    'retries'           : 1,
    'backfill'          : False,
    'catchup'           : False
}

default_args.update({{ dag_args }})
with DAG('{{ modelname }}',schedule_interval = '{{ schedule_interval }}', default_args = default_args) as dag:
    {% for gen_name, gen_hash in gen_hash_dict.items() %}
    {{gen_name}}  = GenOperator(
                               objs            = objs,
                               gen_name        = '{{gen_name}}',
                               gen_hash        = {{gen_hash}},
                               run_id          = {{run_id}},
                               db_conn_id      = '{{modelname}}',
                               mdb_conn_id     = '{{modelname}}_log',
                               retry           = {{retry}},
                               serial          = {{serial}},
                               bar             = {{bar}},
                               user_batch_size = {% if batch %}{{batch}}{% else %}None{%endif %}
                              )
    {% endfor %}

# Add dependencies
{% for child,parent in deps %}
{{ parent }}.set_upstream({{ child}})
{% endfor %}

if __name__ == '__main__':
{% for gen_name in gen_hash_dict.keys() %}
    {{ gen_name }}.execute({})
{% endfor %}
