# External Modules
from typing import Any, Type

# Internal Modules
from dbgen import Model, Obj, Attr, Rel, Int, Varchar, Text, Decimal, Date, PathEQ, Path
from .generators import add_generators

emp = Obj(
    name  = 'employee',
    desc  = 'an example entity',
    attrs = [Attr('name',Varchar(),desc='Full name', id=True),
             Attr('salary',Decimal(),desc='USD/yr')])


emp_rels = [Rel('department','employee'),
            Rel('manager','employee','employee')]

dept = Obj(
    name  = 'department',
    desc  = 'collection of employees',
    attrs = [Attr('name',Varchar(),id=True)])

dept_rels = [Rel('secretary','department','employee')]


################################################################################
################################################################################
################################################################################

objs = [emp, dept]

rels = emp_rels + dept_rels

# Until we fix how relations are added (e.g. CQL paper demo), we cannot do this
peqs = []#PathEQ(Path(attr=dept.id),
         #      Path(rels=[dept['secretary'],emp['department']],attr=dept.id))]

def make_model() -> Model:
    m = Model('{model}')
    m.add(objs); m.add(rels); m.add(peqs)
    add_generators(m)
    return m
